<?xml version="1.0" encoding="UTF-8"?><record_update table="x_snc_reactor_component">
    <x_snc_reactor_component action="INSERT_OR_UPDATE">
        <content_css/>
        <dependencies>16a8414e1b3295105b76777d8b4bcbe5</dependencies>
        <description>The Game Of Life App React component.</description>
        <jsx>false</jsx>
        <name>GameOfLifeApp</name>
        <role>app</role>
        <script><![CDATA[class GameOfLifeApp extends ReactorComponent
{
	constructor(props)
	{
		super(props);
		//this.state = { clicked: false };
		//this.onClick = this.onClick.bind(this);
	}
	/*
	onClick()
	{
		this.setState( {clicked: true} );
		if (typeof this.props.callbackOnClick == 'function')
		{
			this.props.callbackOnClick();
		}
	}
	*/
	
	render()
	{
		

			
		return e(GameOfLifeController,
			{
				height: nHeight,
				width: nWidth,
				cellsize: nCellSize
			});
	}	
}

function GameOfLifeGetCellState(aGameState,nRow,nColumn)
{
	if (aGameState[nRow] != undefined)
	{
		aRow = aGameState[nRow];
		if (aRow != undefined)
		{
			if (aRow[nColumn] != undefined)
			{
				bState = aRow[nColumn];
				if (bState == 1)
				{
					return true;	
				}	
			}
		}
	}
	return false;
}


function GameOfLifeCountNeighbors(nHeight,nWidth,aGameState,nRow,nColumn)
{
	function GetPos(nPos,nRange)
	{
		if (nPos == -1)
		{
			return nRange - 1;
		}
		return nPos % nRange;	
	}

	var nNeighbors = 0;
	if (GameOfLifeGetCellState(aGameState,GetPos(nRow-1,nHeight),GetPos(nColumn-1,nWidth)))
	{
		nNeighbors++;
	}
	if (GameOfLifeGetCellState(aGameState,GetPos(nRow-1,nHeight),GetPos(nColumn,nWidth)))
	{
		nNeighbors++;
	}
	if (GameOfLifeGetCellState(aGameState,GetPos(nRow-1,nHeight),GetPos(nColumn+1,nWidth)))
	{
		nNeighbors++;
	}
	if (GameOfLifeGetCellState(aGameState,GetPos(nRow,nHeight),GetPos(nColumn-1,nWidth)))
	{
		nNeighbors++;
	}
	if (GameOfLifeGetCellState(aGameState,GetPos(nRow,nHeight),GetPos(nColumn+1,nWidth)))
	{
		nNeighbors++;
	}
	if (GameOfLifeGetCellState(aGameState,GetPos(nRow+1,nHeight),GetPos(nColumn-1,nWidth)))
	{
		nNeighbors++;
	}
	if (GameOfLifeGetCellState(aGameState,GetPos(nRow+1,nHeight),GetPos(nColumn,nWidth)))
	{
		nNeighbors++;
	}
	if (GameOfLifeGetCellState(aGameState,GetPos(nRow+1,nHeight),GetPos(nColumn+1,nWidth)))
	{
		nNeighbors++;
	}
	return nNeighbors;
}
				
				function GameOfLifeGetNewState(bState,nNeighbors)
				{
     			var bNewState = false;
    			if (bState == false)
    			{
    				if (nNeighbors == 3)
    				{
    					bNewState = true;
    				}
    			}
    			if (bState == true)
    			{
    				bNewState = true;
    				if (nNeighbors < 2)
    				{
    					bNewState = false;
    				}
    				else if (nNeighbors > 3)
    				{
    					bNewState = false;
    				}
    			}
    			return bNewState;
				}
        
        function GameOfLifePlay(nHeight,nWidth,aGameState)
        {
        	var aNewGameState = [];
        	for (var nRow = 0; nRow < nHeight; nRow++)
        	{
        		aNewRow = [];
        		for (var nColumn = 0; nColumn < nWidth; nColumn++)
        		{
        			nNeighbors = GameOfLifeCountNeighbors(nHeight,nWidth,aGameState,nRow,nColumn);
        			var bState = GameOfLifeGetCellState(aGameState,nRow,nColumn);

        			aNewRow.push(GameOfLifeGetNewState(bState,nNeighbors));
        		}
        		aNewGameState.push(aNewRow);
        	}
        	return aNewGameState;
        }
            
        function GameOfLifeRender(strElementId, nHeight, nWidth, nCellSize, aGameState)
        {
        	var eGame = document.getElementById(strElementId);
        	if (eGame == undefined)
        	{
        		return;
        	}
        	var strHtml = '';
        	
        	strHtml += '<svg width="'+(nWidth*nCellSize)+'" height="'+(nHeight*nCellSize)+'" style="display:block; margin:auto;">';
        	
        	var strColorGrid = 'darkgrey';
        	
        	
        	var strColorLife = 'black';
        	var strColorDead = 'white';

        	for (var nRow = 0; nRow < nHeight; nRow++)
        	{
        		for (var nColumn = 0; nColumn < nWidth; nColumn++)
        		{
        			var bState = GameOfLifeGetCellState(aGameState,nRow,nColumn);

        			var strColor = strColorDead;
        			
        			if (bState == true)
        			{
	        			strColor = strColorLife;
        			}
        			strHtml += '<rect x="'+nCellSize*nColumn+'" y="'+nCellSize*nRow+'" width="'+nCellSize+'" height="'+nCellSize+'" style="fill: '+strColor+';"></rect>';
        		}	
        	}

					function RenderSvgLine(nX1,nY1,nX2,nY2,strColor)
					{
						return '<line x1="'+nX1+'" y1="'+nY1+'" x2="'+nX2+'" y2="'+nY2+'" stroke="'+strColor+'"/>';
					}

       		strHtml += RenderSvgLine(0,0,(nWidth*nCellSize)-1,0,strColorGrid);
					for (nRow = 0; nRow < nHeight; nRow++)
					{
        		strHtml += RenderSvgLine(0,((nRow+1)*nCellSize)-1,(nWidth*nCellSize)-1,((nRow+1)*nCellSize)-1,strColorGrid);
        	}

       		strHtml += RenderSvgLine(0,0,0,(nHeight*nCellSize)-1,strColorGrid);
					for (nColumn = 0; nColumn < nWidth; nColumn++)
					{
        		strHtml += RenderSvgLine(((nColumn+1)*nCellSize)-1,0,((nColumn+1)*nCellSize)-1,(nHeight*nCellSize)-1,strColorGrid);
        	}

        	
        	strHtml += '</svg>';
        	
        	eGame.innerHTML = strHtml;
        	
        	
        } 

  			
  			function GameOfLife(strElementId)
  			{
	     		var nGameWidth = 50; 
	     		var nGameHeight = 30;
	     		var nCellSize = 20; 
	     		var nSpeed = 80;
	
  				
  				
	     		var aGameState = [];
				
					aGameState.push([0,0,1,0,0,0,0]);     		
	     		aGameState.push([0,0,0,1,0,0,0]);
	     		aGameState.push([0,1,1,1,0,0,0]);
	     		aGameState.push([0,0,0,0,0,0,0]);
	     		aGameState.push([0,0,0,0,0,0,0]);
	     		aGameState.push([0,0,0,0,0,0,0]);     
	     		aGameState.push([0,0,0,0,0,0,0]);    
	
	/*
	
	     		aGameState.push([]);    
	     		aGameState.push([]);    
	     		aGameState.push([]);    
	
	     		aGameState.push([0,0,0,0,0,0,0,0]);     		
	     		aGameState.push([0,0,0,0,0,0,0,0]);
	     		aGameState.push([0,0,0,0,0,1,0,0]);
	     		aGameState.push([0,0,0,0,0,1,0,0]);
	     		aGameState.push([0,0,0,0,0,1,0,0]);
	     		aGameState.push([0,0,0,0,0,1,0,0]);     
	     		aGameState.push([0,0,0,0,0,1,0,0]);     
	*/
	    		
	     		

	     		var nGeneration = 0;	

	  			function GameOfLifeTimerNextStep()
	  			{
	  				GameOfLifeRender(strElementId,nGameHeight,nGameWidth,nCellSize,aGameState);
					aGameState = GameOfLifePlay(nGameHeight,nGameWidth,aGameState);
					nGeneration++;
					setTimeout(GameOfLifeTimerNextStep,nSpeed);
	  			}
	  			
	  			GameOfLifeTimerNextStep();
  				
  			}  
  			
  			
  			GameOfLife('gameoflife');	
]]></script>
        <source_type>ui_script</source_type>
        <sys_class_name>x_snc_reactor_component</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-10-28 18:15:13</sys_created_on>
        <sys_id>d98bf4821b3295105b76777d8b4bcb53</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>GameOfLifeApp</sys_name>
        <sys_package display_value="GameOfLife WORK IN PROGRESS" source="x_snc_game_of_life">4f2830ce1bfe55105b76777d8b4bcb35</sys_package>
        <sys_policy/>
        <sys_scope display_value="GameOfLife WORK IN PROGRESS">4f2830ce1bfe55105b76777d8b4bcb35</sys_scope>
        <sys_update_name>x_snc_reactor_component_d98bf4821b3295105b76777d8b4bcb53</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-10-28 19:13:20</sys_updated_on>
        <type>script</type>
        <ui_script display_value="x_snc_game_of_life.GameOfLifeApp">5a2bb0821b3295105b76777d8b4bcb5a</ui_script>
        <url/>
    </x_snc_reactor_component>
</record_update>
