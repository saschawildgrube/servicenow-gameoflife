<?xml version="1.0" encoding="UTF-8"?><record_update table="x_snc_reactor_component">
    <x_snc_reactor_component action="INSERT_OR_UPDATE">
        <content_css/>
        <dependencies>ab05058a1b3295105b76777d8b4bcb5f,50263d8e1bb295105b76777d8b4bcbef,9191395fdbd21510f359c191159619ef</dependencies>
        <description>The react component that manages the game state of the Conway's Game Of Life.</description>
        <jsx>false</jsx>
        <name>GameOfLifeController</name>
        <role>controller</role>
        <script><![CDATA[class GameOfLifeController extends ReactorComponent
{
	constructor(props)
	{
		super(props);

		var nGameWidth = 50; 
		var nGameHeight = 30;
		var nCellSize = 20; 
		var nSpeed = 80;
		
		var strPattern = GetStringValue(this.props.pattern);
		if (strPattern == '')
		{
			strPattern = 'glider';
		}

		this.state =
		{
			error: '',
			pattern: strPattern,
			width: nGameWidth,
			height: nGameHeight,
			cellsize: nCellSize,
			speed: nSpeed,
			generation: 0,
			gamestate: null
		};
		
		this.onNextGeneration = this.onNextGeneration.bind(this);
		this.onServerRequestGetPattern = this.onServerRequestGetPattern.bind(this);
	}

	componentDidMount()
	{
		this.timerID = setInterval(
			//() = > this.onNextGeneration(),
			this.onNextGeneration,
			this.state.speed
		);
	}

	componentWillUnmount()
	{
		clearInterval(this.timerID);
	}

	onNextGeneration()
	{
		if (this.state.gamestate == null)
		{
			return;
		}
		var aNewGameState = GameOfLifePlay(
			this.state.height,
			this.state.width,
			this.state.gamestate);
		this.setState(
			{
				generation: this.state.generation + 1,
				gamestate: aNewGameState
			});
	}

	onServerRequestGetPattern(response)
	{
		if (IsArray(response))
		{
			this.setState(
				{
					gamestate: response
				}
			);
		}
		else
		{
			this.setState( { error: 'Could not load pattern!' } );
		}
	}
	
	
	render()
	{
		if (this.state.error != '')
		{
			return e('div',{},'ERROR: '+ this.state.error);
		}
		if (this.state.gamestate == null)
		{
			ServerRequest(
				'x_snc_game_of_life.GameOfLifeClientAPI',
				'GetPattern',
				{
					pattern: this.state.pattern
				},
				this.onServerRequestGetPattern);
			return e(Waiting,{ text: 'Loading Pattern...'});
		}

		return e(GameOfLifeBoard,
			{
				height: this.state.height,
				width: this.state.width,
				cellsize: this.state.cellsize,
				gamestate: this.state.gamestate
			});	
	}	
}]]></script>
        <source_type>ui_script</source_type>
        <sys_class_name>x_snc_reactor_component</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-10-28 19:12:41</sys_created_on>
        <sys_id>16a8414e1b3295105b76777d8b4bcbe5</sys_id>
        <sys_name>GameOfLifeController</sys_name>
        <sys_package display_value="GameOfLife WORK IN PROGRESS" source="x_snc_game_of_life">4f2830ce1bfe55105b76777d8b4bcb35</sys_package>
        <sys_policy/>
        <sys_scope display_value="GameOfLife WORK IN PROGRESS">4f2830ce1bfe55105b76777d8b4bcb35</sys_scope>
        <sys_update_name>x_snc_reactor_component_16a8414e1b3295105b76777d8b4bcbe5</sys_update_name>
        <type>script</type>
        <ui_script display_value="x_snc_game_of_life.GameOfLifeController">fe778dca1b3295105b76777d8b4bcb74</ui_script>
        <url/>
    </x_snc_reactor_component>
</record_update>
